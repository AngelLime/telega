import os
import shutil
import zipfile
import sqlite3
import asyncio
import aiohttp
import re
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7797780063:AAEpngh3P19Pl51sP3LkVuNFEAW3Gok1zHg"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
DATABASE = "mods_signature.db"
ADMIN_IDS = [6471833607, 1819089399]  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CURSEFORGE_API_KEY = "$2a$10$J9E/.7dds4AWc4HMYzsmZO3dIgpXn15qajYz9EHqL.l.VqOxqwXOO"  # –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á CurseForge

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ FSM
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ModStates(StatesGroup):
    waiting_for_clean_mods = State()
    waiting_for_dirty_mods = State()
    waiting_for_check_mods = State()
    waiting_for_modrinth_query = State()
    waiting_for_modrinth_save = State()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS mods (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT NOT NULL,
            type TEXT NOT NULL CHECK(type IN ('clean', 'dirty'))
        )
    """)
    conn.commit()
    conn.close()


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ .jar/.zip —Ñ–∞–π–ª–∞

def extract_class_contents(jar_path):
    extracted_content = set()
    with zipfile.ZipFile(jar_path, 'r') as zip_ref:
        for file_name in zip_ref.namelist():
            if file_name.endswith(".class"):
                with zip_ref.open(file_name) as class_file:
                    try:
                        # –ß–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        content = class_file.read()
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                        strings = re.findall(rb'[\x20-\x7E]{4,}', content)
                        extracted_content.update(s.decode('utf-8') for s in strings)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_name}: {e}")
    return extracted_content


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def add_to_database(content, mod_type):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS mods (id INTEGER PRIMARY KEY, content TEXT, type TEXT)")

    chunk_size = 30
    content_chunks = [list(content)[i:i + chunk_size] for i in range(0, len(content), chunk_size)]

    for chunk in content_chunks:
        cursor.execute("INSERT INTO mods (content, type) VALUES (?, ?)", ("\n".join(chunk), mod_type))

    conn.commit()
    conn.close()


# –û—á–∏—Å—Ç–∫–∞ –≥—Ä—è–∑–Ω—ã—Ö –º–æ–¥–æ–≤ –æ—Ç —á–∏—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫

def clean_dirty_mods(clean_content):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT id, content FROM mods WHERE type = 'dirty'")
    dirty_mods = cursor.fetchall()

    for mod_id, dirty_content in dirty_mods:
        dirty_lines = set(dirty_content.split("\n"))
        cleaned_lines = dirty_lines - clean_content
        cursor.execute("UPDATE mods SET content = ? WHERE id = ?", ("\n".join(cleaned_lines), mod_id))

    conn.commit()
    conn.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞

def check_mod(content):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT content FROM mods WHERE type = 'dirty'")
    dirty_mods = cursor.fetchall()
    conn.close()

    for dirty_content in dirty_mods:
        dirty_lines = set(dirty_content[0].split("\n"))
        if content & dirty_lines:
            return True
    return False


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—ã", callback_data="check_mods")]
    ])
    return keyboard


def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—ã", callback_data="check_mods")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∏—Å—Ç—ã–µ –º–æ–¥—ã", callback_data="add_clean")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—è–∑–Ω—ã–µ –º–æ–¥—ã", callback_data="add_dirty")],
        [InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ –Ω–∞ CurseForge", callback_data="search_curseforge")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        [InlineKeyboardButton(text="   –í—ã—Ö–æ–¥", callback_data="exit")]
    ])
    return keyboard


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text == "/start")
async def start_command(message: types.Message):
    if is_admin(message.from_user.id):
        keyboard = get_admin_keyboard()
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        keyboard = get_user_keyboard()
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query()
async def handle_callback(query: types.CallbackQuery, state: FSMContext):
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–æ–≤
    if data == "check_mods":
        await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–∞–º–∏ (.zip), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ.")
        await state.set_state(ModStates.waiting_for_check_mods)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç—ã—Ö –º–æ–¥–æ–≤
    elif data == "add_clean" and is_admin(query.from_user.id):
        await query.message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç—ã—Ö –º–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–∞–º–∏ (.zip).")
        await state.set_state(ModStates.waiting_for_clean_mods)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—è–∑–Ω—ã—Ö –º–æ–¥–æ–≤
    elif data == "add_dirty" and is_admin(query.from_user.id):
        await query.message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—è–∑–Ω—ã—Ö –º–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–∞–º–∏ (.zip).")
        await state.set_state(ModStates.waiting_for_dirty_mods)

    elif data == "search_curseforge" and is_admin(query.from_user.id):
        await query.message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—è–∑–Ω—ã—Ö –º–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–∞–º–∏ (.zip).")
        await state.set_state(ModStates.waiting_for_modrinth_query)

    # –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    elif data == "cancel":
        await state.clear()
        await query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)

    else:
        await query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(ModStates.waiting_for_check_mods, F.document & F.document.file_name.endswith(".zip"))
async def process_check_mods(message: types.Message, state: FSMContext):
    document = message.document

    max_size = 20 * 1024 * 1024
    if document.file_size > max_size:
        await message.reply("‚õî –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return

    file_path = f"./{document.file_name}"
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    extract_path = "./temp_check"
    os.makedirs(extract_path, exist_ok=True)

    results = []
    try:
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_path)
            file_list = zip_ref.namelist()
            for jar_file in file_list:
                if not jar_file.endswith(".jar"):
                    continue
                jar_path = os.path.join(extract_path, jar_file)
                jar_content = extract_class_contents(jar_path)
                if check_mod(jar_content):
                    results.append(f"‚ùå {jar_file} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —á–∏—Ç–∞.")
                else:
                    results.append(f"‚úÖ {jar_file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except zipfile.BadZipFile:
        results.append("‚õî –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        os.remove(file_path)
        shutil.rmtree(extract_path, ignore_errors=True)

    response = "\n".join(results) if results else "‚õî –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤."
    await message.reply(response)

    await state.clear()


@router.message(ModStates.waiting_for_clean_mods, F.document & F.document.file_name.endswith(".zip"))
async def process_clean_mods(message: types.Message, state: FSMContext):
    document = message.document

    file_path = f"./{document.file_name}"
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    extract_path = "./temp_clean"
    os.makedirs(extract_path, exist_ok=True)

    clean_content = set()
    try:
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_path)
            for file_name in zip_ref.namelist():
                if file_name.endswith(".jar"):
                    jar_path = os.path.join(extract_path, file_name)
                    clean_content.update(extract_class_contents(jar_path))

        add_to_database(clean_content, "clean")
        clean_dirty_mods(clean_content)

        await message.reply(f"‚úÖ –í—Å–µ –º–æ–¥—ã –∏–∑ {document.file_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —á–∏—Å—Ç—ã–µ. –ì—Ä—è–∑–Ω—ã–µ –º–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except zipfile.BadZipFile:
        await message.reply("‚õî –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        os.remove(file_path)
        shutil.rmtree(extract_path, ignore_errors=True)

    await state.clear()


@router.message(ModStates.waiting_for_dirty_mods, F.document & F.document.file_name.endswith(".zip"))
async def process_dirty_mods(message: types.Message, state: FSMContext):
    document = message.document

    file_path = f"./{document.file_name}"
    file = await bot.get_file(document.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    extract_path = "./temp_dirty"
    os.makedirs(extract_path, exist_ok=True)

    dirty_content = set()
    try:
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_path)
            for file_name in zip_ref.namelist():
                if file_name.endswith(".jar"):
                    jar_path = os.path.join(extract_path, file_name)
                    dirty_content.update(extract_class_contents(jar_path))

        add_to_database(dirty_content, "dirty")

        clean_content = set()
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("SELECT content FROM mods WHERE type = 'clean'")
        for row in cursor.fetchall():
            clean_content.update(row[0].split("\n"))
        conn.close()

        clean_dirty_mods(clean_content)

        await message.reply(f"‚ùå –í—Å–µ –º–æ–¥—ã –∏–∑ {document.file_name} –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –≥—Ä—è–∑–Ω—ã–µ. –ß–∏—Å—Ç—ã–π –∫–æ–¥ —É–¥–∞–ª—ë–Ω.")
    except zipfile.BadZipFile:
        await message.reply("‚õî –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        os.remove(file_path)
        shutil.rmtree(extract_path, ignore_errors=True)

    await state.clear()


async def handle_callback(query: types.CallbackQuery, state: FSMContext):
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    if data == "exit":
        await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await query.message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ /start.", reply_markup=None)
        return


def resolve_conflicts(content: set, mod_type: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()

    if mod_type == "dirty":
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —á–∏—Å—Ç—ã–º –∫–æ–¥–æ–º
        cursor.execute("SELECT id, content FROM mods WHERE type = 'clean'")
        clean_rows = cursor.fetchall()
        for clean_id, clean_content in clean_rows:
            clean_set = set(clean_content.split("\n"))
            overlap = content.intersection(clean_set)
            if overlap:
                updated_clean = clean_set - overlap
                if updated_clean:
                    cursor.execute(
                        "UPDATE mods SET content = ? WHERE id = ?",
                        ("\n".join(updated_clean), clean_id)
                    )
                else:
                    cursor.execute("DELETE FROM mods WHERE id = ?", (clean_id,))
    elif mod_type == "clean":
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –≥—Ä—è–∑–Ω—ã–º –∫–æ–¥–æ–º
        cursor.execute("SELECT id, content FROM mods WHERE type = 'dirty'")
        dirty_rows = cursor.fetchall()
        for dirty_id, dirty_content in dirty_rows:
            dirty_set = set(dirty_content.split("\n"))
            overlap = content.intersection(dirty_set)
            if overlap:
                updated_dirty = dirty_set - overlap
                if updated_dirty:
                    cursor.execute(
                        "UPDATE mods SET content = ? WHERE id = ?",
                        ("\n".join(updated_dirty), dirty_id)
                    )
                else:
                    cursor.execute("DELETE FROM mods WHERE id = ?", (dirty_id,))

    conn.commit()
    conn.close()


MODRINTH_URL_REGEX = r"https?://(?:www\.)?modrinth\.com/mod/([^/]+)"


async def extract_mod_id_from_slug(slug: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –º–æ–¥–∞ –ø–æ slug —á–µ—Ä–µ–∑ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Modrinth API."""
    url = f"https://api.modrinth.com/v2/project/{slug}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data.get("id")
            else:
                print(f"‚õîÔ∏è API Error: {response.status} {await response.text()}")
    return None


@router.message(ModStates.waiting_for_modrinth_query)
async def process_modrinth_query(message: types.Message, state: FSMContext):
    query = message.text

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ—á—å slug
    if query.startswith("http://") or query.startswith("https://"):
        match = re.search(MODRINTH_URL_REGEX, query)
        if match:
            slug = match.group(1)
            mod_id = await extract_mod_id_from_slug(slug)
            if mod_id:
                await message.reply(
                    f"üîç –ù–∞–π–¥–µ–Ω ID –º–æ–¥–∞: `{mod_id}`. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ç–∏–ø (clean/dirty), –Ω–∞–ø—Ä–∏–º–µ—Ä: `{mod_id} clean`"
                )
                await state.set_state(ModStates.waiting_for_modrinth_save)
                return
            else:
                await message.reply("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
                return
        else:
            await message.reply("‚õî –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥.")
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—â–µ–º –º–æ–¥—ã
    results = await search_modrinth(query)

    if results:
        response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–æ–¥–æ–≤ –Ω–∞ Modrinth:\n\n"
        for mod in results[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            response += f"\u2022 [{mod['title']}]({mod['url']}) (ID: {mod['id']})\n"
        response += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –º–æ–¥–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ç–∏–ø (clean/dirty), –Ω–∞–ø—Ä–∏–º–µ—Ä: `123456 clean`"
        await message.reply(response, disable_web_page_preview=True)
        await state.set_state(ModStates.waiting_for_modrinth_save)
    else:
        await message.reply("–ú–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()


async def search_modrinth(query: str):
    """–ü–æ–∏—Å–∫ –º–æ–¥–æ–≤ –Ω–∞ Modrinth –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    url = f"https://api.modrinth.com/v2/search?query={query}&limit=5"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return [
                    {
                        "title": mod["title"],
                        "id": mod["project_id"],
                        "url": f"https://modrinth.com/mod/{mod['slug']}"
                    }
                    for mod in data.get("hits", [])
                ]
            else:
                print(f"‚õîÔ∏è API Error: {response.status} {await response.text()}")
    return []


def clear_directory(directory: str):
    if os.path.exists(directory):
        for file in os.listdir(directory):
            file_path = os.path.join(directory, file)
            try:
                if os.path.isfile(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")


@router.message(ModStates.waiting_for_modrinth_save)
async def process_modrinth_save(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mod_id, mod_type = message.text.split()
        mod_id = mod_id.strip()
        if mod_type not in {"clean", "dirty"}:
            raise ValueError("Invalid mod type")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ
        mod_url = f"https://api.modrinth.com/v2/project/{mod_id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(mod_url) as mod_response:
                if mod_response.status == 200:
                    mod_data = await mod_response.json()
                    mod_name = mod_data.get("title")

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–∞
                    files_url = f"https://api.modrinth.com/v2/project/{mod_id}/version"
                    async with session.get(files_url) as files_response:
                        if files_response.status == 200:
                            files_data = await files_response.json()
                            mod_content = set()

                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            total_files = sum(
                                1 for version in files_data
                                for file in version.get("files", [])
                                if file.get("filename", "").endswith(".jar")
                            )
                            downloaded_files = 0

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                            progress_message = await message.reply(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: 0 –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤...")

                            for version in files_data:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –≤–µ—Ä—Å–∏–∏
                                for file in version.get("files", []):
                                    filename = file.get("filename", "")
                                    download_url = file.get("url")

                                    if filename.endswith(".jar") and download_url:
                                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–∏
                                        os.makedirs("./mods", exist_ok=True)
                                        file_path = f"./mods/{filename}"

                                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                                        async with session.get(download_url) as file_response:
                                            if file_response.status == 200:
                                                with open(file_path, "wb") as mod_file:
                                                    mod_file.write(await file_response.read())

                                                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ jar-—Ñ–∞–π–ª–∞
                                                mod_content.update(extract_class_contents(file_path))

                                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                                                downloaded_files += 1
                                                await progress_message.edit_text(
                                                    f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: {downloaded_files} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤..."
                                                )

                            # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥ –≤ –ë–î
                            resolve_conflicts(mod_content, mod_type)
                            add_to_database(mod_content, mod_type)

                            await progress_message.edit_text(
                                f"‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–∞ '{mod_name}' –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ {mod_type}.")
                        else:
                            await message.reply("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–∞.")
                else:
                    await message.reply("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
    except Exception as e:
        await message.reply(f"‚õî –û—à–∏–±–∫–∞: {e}")
    finally:
        clear_directory("./mods")
        await state.clear()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
